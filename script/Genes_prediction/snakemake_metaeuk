####Dry RUN command :
#nohup snakemake -j 10 -s snakemake_metaeuk -n --cluster "sbatch -J {params.name} -p {params.partition} -t {params.time} --mem {params.mem} --cpus-per-task {params.threads} -o {params.out} -e {params.err} --exclude=pbil-deb[14-27] " &> nohup_snakemake_metaeuk.out &
####Unlock command :
#nohup snakemake -j 10 -s snakemake_metaeuk --unlock --cluster "sbatch -J {params.name} -p {params.partition} -t {params.time} --mem {params.mem} --cpus-per-task {params.threads} -o {params.out} -e {params.err} --exclude=pbil-deb[14-27] "  &> nohup_snakemake_metaeuk.out &
####Real command :
#nohup snakemake -j 10 -s snakemake_metaeuk --cluster "sbatch -J {params.name} -p {params.partition} -t {params.time} --mem {params.mem} --cpus-per-task {params.threads} -o {params.out} -e {params.err} --exclude=pbil-deb[14-27] " &> nohup_snakemake_metaeuk.out &

import re
import os

#paths
bin_dir="/beegfs/project/horizon/bin/miniconda3/bin/"
scripts_dir="/beegfs/data/fblanchard/horizon/script/Genes_prediction/"
logs_dir="/beegfs/data/fblanchard/horizon/logs/Genes_prediction/"
genomes_dir="/beegfs/data/fblanchard/horizon/genome/"
db_dir="/beegfs/project/horizon/db/UniRef/"
preds_dir="/beegfs/data/fblanchard/horizon/Genes_prediction/"
list_dir="/beegfs/data/fblanchard/horizon/list/"
horizon_TE="/beegfs/project/horizon/data/TE/"

#species_list
species_file = open('/beegfs/data/fblanchard/horizon/list/species_horizon_list.txt', 'r') #write the list
# read the content and split when newline 
list_species = species_file.read().split('\n') 
list_species = list_species[:-1] 

rule all:
        input:
                #rule predict_mtk
                expand(preds_dir+"{species}/{species}_predsResults.gff", species = list_species), 
                expand(preds_dir+"{species}/{species}_predsResults.codon.fas", species = list_species),
                #rule mtk_taxtocontig
                expand(preds_dir+"{species}/{species}_taxResult_tax_per_contig.tsv", species = list_species), 
                expand(preds_dir+"{species}/{species}_taxResult_tax_per_pred.tsv", species = list_species),
                #make_mtk_bed_fasta
                expand(preds_dir+"{species}/{species}_mtk.fa",species = list_species), 
                expand(preds_dir+"{species}/{species}_mtk.bed",species = list_species),
                #make_TE_bed_fasta
                expand(preds_dir+"{species}/{species}_TE.bed",species = list_species), 
                expand(preds_dir+"{species}/{species}_TE.fa",species = list_species),
                #rule intersect
                expand(preds_dir+"{species}/{species}_preds_all.fa",species = list_species), 
                expand(preds_dir+"{species}/{species}_intersect_mtk_TE_overlap.gff",species = list_species),
                expand(preds_dir+"{species}/{species}_intersect_mtk_TE_nooverlap.gff",species = list_species),
                expand(preds_dir+"{species}/{species}_intersect_TE_mtk_nooverlap.gff",species = list_species),  
                #rule choose_predict
                expand(preds_dir+"{species}/{species}_preds_final.bed",species = list_species), 
                expand(preds_dir+"{species}/{species}_preds_final.fa",species = list_species)
               
rule predict_mtk : #returns the genes prediction made with metaeuk and taxonomic assignation 
        params:
                name="mtk_{species}",
                out=logs_dir+"predict_mtk/mtk_{species}.out",
                err=logs_dir+"predict_mtk/mtk_{species}.error",
                partition="normal",
                threads="4",
                time="30:00:00",
                mem="120G"
        input:
                species_fa=genomes_dir+"{species}.fa",
        output:
                mtk_predict_gff=preds_dir+"{species}/{species}_predsResults.gff",
                mtk_predict_codon=preds_dir+"{species}/{species}_predsResults.codon.fas",
                mtk_taxo_contig=preds_dir+"{species}/{species}_taxResult_tax_per_contig.tsv",
                mtk_taxo_pred=preds_dir+"{species}/{species}_taxResult_tax_per_pred.tsv"
        shell:
                """
                mkdir -p {preds_dir}{wildcards.species}/
                {bin_dir}metaeuk easy-predict {input.species_fa} {db_dir}UniRef_insecta90_viruses90_bacteria50.fa {preds_dir}{wildcards.species}/{wildcards.species}_predsResults {preds_dir}{wildcards.species}/{wildcards.species}_tempFolder --min-length 33 --compressed 1 --split-memory-limit 65G
                {bin_dir}metaeuk taxtocontig {preds_dir}{wildcards.species}/{wildcards.species}_tempFolder/[0-9]*/contigs {preds_dir}{wildcards.species}/{wildcards.species}_predsResults.fas {preds_dir}{wildcards.species}/{wildcards.species}_predsResults.headersMap.tsv {db_dir}UniRef_insecta90_viruses90_bacteria50_clean_DB/UniRef_insecta90_viruses90_bacteria50_clean_DB {preds_dir}{wildcards.species}/{wildcards.species}_taxResult {preds_dir}{wildcards.species}/{wildcards.species}_tempFolder --majority 0.5 --tax-lineage 1 --lca-mode 2
                rm -r {preds_dir}{wildcards.species}/{wildcards.species}_tempFolder
                """


rule make_mtk_bed_fasta: #Create the .bed file from metaeuk prediction and modify the header from the prediction file (.fa).
        params:
                name="make_mtk_bed_fasta_{species}",
                out=logs_dir+"make_mtk_bed_fasta/make_mtk_bed_fasta_{species}.out",
                err=logs_dir+"make_mtk_bed_fasta/make_mtk_bed_fasta_{species}.error",
                partition="normal",
                threads="2",
                time="0:30:00",
                mem="20G"
        input:
                codon_fasta=preds_dir+"{species}/{species}_predsResults.codon.fas",
                order_file=list_dir+"species_horizon_order.txt"
        output:
                mtk_fasta=preds_dir+"{species}/{species}_mtk.fa",
                mtk_bed=preds_dir+"{species}/{species}_mtk.bed"
        shell:
                """
                {scripts_dir}format_header.py {input.codon_fasta} {input.order_file} {output.mtk_fasta}

                # Generate the mtk BED file from the mtk FASTA file
                awk -F'_species_|_order|_start|_end|_strand' '/^>/ {{
                        split($2, a, "_");
                        print a[1]"_"a[2]"_"a[3]"_"a[4] "\t" $4 "\t" $5 "\t" $0
                }}' {output.mtk_fasta} > {output.mtk_bed}
                """


rule make_TE_bed_fasta: #from the TE prediction, create the .bed file with the correct header and the .fa file.
        params:
                name="make_TE_bed_fasta_{species}",
                out=logs_dir+"make_TE_bed_fasta/make_TE_bed{species}.out",
                err=logs_dir+"make_TE_bed_fasta/make_TE_bed{species}.error",
                partition="normal",
                threads="2",
                time="0:30:00",
                mem="20G"
        input:
                m8=horizon_TE+"{species}/result_mmseqs2.m8",
                genome=genomes_dir+"{species}.fa"
        output:
                TE_bed=preds_dir+"{species}/{species}_TE.bed",
                TE_fasta=preds_dir+"{species}/{species}_TE.fa",
        shell:
                """
                awk -F'\t' '{{print $1, $9, $10, $4}}' OFS='\t' {input.m8} | sed 's/|/_/g' | awk -v species="{wildcards.species}" 'BEGIN {{OFS="\t"}} {{print species"_"$1, $2, $3, $4}}' | awk 'BEGIN {{OFS="\t"}} {{$4 = "TE_"$4"_species_"$1"_order_start"$2"_end"$3"_strand"; print}}' | awk '{{ if ($2 < $3) print $1, $2, $3, $4 "+"; else print $1, $3, $2, $4 "-"}}' OFS='\t' > {preds_dir}{wildcards.species}/{wildcards.species}_TE_unordered.bed
                awk -v species="{wildcards.species}" 'NR==FNR {{order[$1] = $2; next}} {{gsub("_order", "_order" order[species]); print}}' OFS='\t' {list_dir}species_horizon_order.txt {preds_dir}{wildcards.species}/{wildcards.species}_TE_unordered.bed > {output.TE_bed} 
                bedtools getfasta -fi {input.genome} -bed {output.TE_bed} -fo {output.TE_fasta} -nameOnly
                """


rule intersect: #Compares mtk and TE .bed files and detects duplicates prediction 
        params:
                name="intersect_{species}",
                out=logs_dir+"intersect/intersect_{species}.out",
                err=logs_dir+"intersect/intersect_{species}.error",
                partition="normal",
                threads="8",
                time="2:00:00",
                mem="20G"
        input:
                mtk_fasta=preds_dir+"{species}/{species}_mtk.fa",
                TE_fasta=preds_dir+"{species}/{species}_TE.fa",
                mtk_bed=preds_dir+"{species}/{species}_mtk.bed",
                TE_bed=preds_dir+"{species}/{species}_TE.bed"
        output:
                all_preds=preds_dir+"{species}/{species}_preds_all.fa",
                overlap_mtk_TE=preds_dir+"{species}/{species}_intersect_mtk_TE_overlap.gff",
                nooverlap_mtk_TE=preds_dir+"{species}/{species}_intersect_mtk_TE_nooverlap.gff",
                nooverlap_TE_mtk=preds_dir+"{species}/{species}_intersect_TE_mtk_nooverlap.gff"
        shell:
                """
                cat {input.mtk_fasta} {input.TE_fasta} > {output.all_preds}

                {bin_dir}bedtools intersect -a {input.mtk_bed} -b {input.TE_bed} -wo > {output.overlap_mtk_TE}
                {bin_dir}bedtools intersect -a {input.mtk_bed} -b {input.TE_bed} -v > {output.nooverlap_mtk_TE}
                {bin_dir}bedtools intersect -a {input.TE_bed} -b {input.mtk_bed} -v > {output.nooverlap_TE_mtk}
                """


rule choose_predict: #choisit les predictions les plus longues
        params:
                name="choose_predict_{species}",
                out=logs_dir+"choose_predict/choose_predict_{species}.out",
                err=logs_dir+"choose_predict/choose_predict_{species}.error",
                partition="normal",
                threads="8",
                time="2:00:00",
                mem="20G"
        input:
                overlap_mtk_TE=preds_dir+"{species}/{species}_intersect_mtk_TE_overlap.gff",
                nooverlap_mtk_TE=preds_dir+"{species}/{species}_intersect_mtk_TE_nooverlap.gff",
                nooverlap_TE_mtk=preds_dir+"{species}/{species}_intersect_TE_mtk_nooverlap.gff",
                genome=genomes_dir+"{species}.fa"
               
        output:
                predict_bed=preds_dir+"{species}/{species}_preds_final.bed",
                predict_fa=preds_dir+"{species}/{species}_preds_final.fa"

        shell:
                """
                {scripts_dir}choose_predict.py -i {input.overlap_mtk_TE} -o {preds_dir}{wildcards.species}/{wildcards.species}_selected_overlap.gff
                cat {preds_dir}{wildcards.species}/{wildcards.species}_selected_overlap.gff {input.nooverlap_mtk_TE} {input.nooverlap_TE_mtk} | sort | uniq > {output.predict_bed}
                
                sed -i 's/>//g' {output.predict_bed}
                sed -i 's/#/:/g' {output.predict_bed}

                bedtools getfasta -fi {input.genome} -bed {output.predict_bed} -fo {output.predict_fa} -nameOnly
                """

                